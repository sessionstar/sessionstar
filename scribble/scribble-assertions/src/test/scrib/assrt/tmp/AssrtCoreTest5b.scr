//$ bin/scribblec-assrt.sh -ip scribble-assertions/src/test/scrib/ -d scribble-assertions/src/test/scrib/ scribble-assertions/src/test/scrib/assrt/tmp/AssrtCoreTest5b.scr -batch -fair -z3 -assrt



module assrt.tmp.AssrtCoreTest5b;


type <fstar> "int" from "" as int;
//type <fstar> "bool" from "" as bool;
type <fstar> "string" from "" as string;


//*  // TODO: not working yet
global protocol HLCrefine(role A, role B, role C) {
  start(n:int) from A to B;     @'0<=n && n<100'
  limit(t:int) from A to B;     @'t>0'
  guess(x:int) from C to B;     @'0<=x && x<100'
  do HLCrefineAux(A, B, C);        @'<n, t, x, x>'
}

aux global protocol HLCrefineAux(role A, role B, role C) 
                                @'<n1:B=0, t1:B=0, xB:B=0, xC:C=0> 0<=n1&&n1<100 && t1>=0 && 0<=xB&&xB<100 && xC=xB' {
  choice at B {
    higher() from B to C;       @'n1>xB && t1>0'
    higher() from B to A;
    guess(x2:int) from C to B;  @'x2>xC && 0<=x2&&x2<100'  // TODO: add guess interval
    do HLCrefineAux(A, B, C);      @'<n1, t1-1, x2, x2>'
  } or {
    win() from B to C;          @'n1=xB'
    lose() from B to A;
  } or {
    lose() from B to C;         @'(!(n1=xB)) && t1=0'  // FIXME: ! precedence
    win() from B to A;
  } or {
    lower() from B to C;        @'n1<xB && t1>0'
    lower() from B to A;
    guess(x3:int) from C to B;  @'x3<xC && 0<=x3&&x3<100'
    do HLCrefineAux(A, B, C);      @'<n1, t1-1, x3, x3>'
  }
}
