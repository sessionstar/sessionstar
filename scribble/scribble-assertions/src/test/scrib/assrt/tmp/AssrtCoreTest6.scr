//$ bin/scribblec-assrt.sh -ip scribble-assertions/src/test/scrib/ -d scribble-assertions/src/test/scrib/ scribble-assertions/src/test/scrib/assrt/tmp/AssrtCoreTest6.scr -batch -fair -z3 -assrt



module assrt.tmp.AssrtCoreTest6;


type <fstar> "int" from "" as int;
//type <fstar> "bool" from "" as bool;
type <fstar> "string" from "" as string;
type <fstar> "string" from "" as String;




global protocol Test001(role A, role B, role C) {
	1(x:int) from A to B;  @'x>0'
	2() from B to C;
	3(z:int) from C to A;  @'z>x'  // Testing (by manual inspection of fsm output) phantom payvar assertion inclusion in model building
}

global protocol Test002(role A, role B, role C) {  // Testing phantom payvar re. K (phantom helloworld)
	1(x:int) from A to B;
	2(y:int) from B to C; @'y=x'  // x phantom payvar, but y=x concrete assertion -- cf. refactoring assertions as actual payload refinements
	3(z:int) from C to A; @'z=x'
}

global protocol Test003(role A, role B, role C, role D) {
	1(x:int) from A to B;
	2(y:int) from B to C;  @'y=x'  // phantom assertion for D -- CHECKME: just treat all knowledge "globally"
	3(z:int) from C to D;  @'z=y'
	4(x1:int) from C to A; //@'x1=x'
}

global protocol Test004(role A, role B, role C) {
	1(x:int) from A to B; @'x>0'
	2(y:int) from B to C; @'y>x'
	3(z:int) from C to A; @'z>x'
}



global protocol Test005(role A, role B, role C) {
	1(x:String) from A to B; @'x="abc"' // Testing phantom payvar sorts
	2() from B to C;	
}


global protocol Test006(role A, role B, role C) {
	1(x:int) from A to B;  @'x>3'
	2(y:int) from B to C;  @'y>x'
	//3(z:int) from C to A;  @'z>x'  // Testing unknown
	3(z:int) from C to A;  @'z>y'
}


// A->B x . C->D y -- sync vs. async phantom? -- edge phantoms: recursion, terminal? reordering

// testing phantom for payload vars
global protocol Test007(role A, role B, role C) {
	1(x:int) from A to B; @'x>0'
	2() from B to C;
}
//*/


//global protocol Proto1(role A, role B, role C) @'<n:B=1, t:B=1> (0 <= n && n < 100) && 0 < t' {
global protocol Test008(role A, role B, role C) @'<x:B=0> x=0' {
//global protocol Proto1(role A, role B, role C) @'<x:=0> x=0' {  // testing initial makeV
	1
	() from A to B;
	2() from B to C;
}


global protocol Test009(role A, role B, role C) {
	1() from A to B;
	2() from B to C;
	do Test009Aux(A, B, C); @'<1>'
}

aux global protocol Test009Aux(role A, role B, role C) @'<x:B=1> x>0' {  // Testing phantom statevars
	3() from A to B;
	4() from B to C;
}


global protocol Test010(role A, role B, role C) {  // Testing phantom statevars
	1() from A to B;
	do Test010Aux(A, B, C); @'<1>'
}

aux global protocol Test010Aux(role A, role B, role C) @'<x:B=1> x>0' {
	2() from B to A;
	3() from B to C;
}







global protocol OnlineWallet(role A, role B, role C) {  // Cf. OnlineWallet
	0(b:int) from B to A;  @'b>=-100'
	foo() from B to C;
	do OnlineWalletAux(A, B, C);    @'<b+100, b, 100>'
}
aux global protocol OnlineWalletAux(role A, role B, role C)  // Testing exist quant phantom statevars in state assertions (allow w.r.t. C)
			@'<allow:A=100, balance:B=0, overdraft:B=100> allow=balance+overdraft && balance>=(0-overdraft) && overdraft>=0' {

	choice at A {
		1(x:int) from A to B;  @'0<x && x<=allow'
		bar1() from B to C;
		do OnlineWalletAux(A, B, C);    @'<allow-x, balance-x, overdraft>'
	} or {
		2() from A to B;
		bar2() from B to C;
	}
}


global protocol HighLow(role A, role B, role C) {
  start(n:int) from A to B;  @'0<=n && n<100'
  limit(t:int) from A to B;  @'t>0'
  do HighLowAux(A, B, C);     @'<n, t>'
}

aux global protocol HighLowAux(role A, role B, role C) @'<n1:B=0, t1:B=1> t1>0' {
  guess(x:int) from C to B;
  choice at B {
    higher() from B to C;   @'n1>x && t1>1'
    higher() from B to A;
    do HighLowAux(A, B, C);  @'<n1, t1-1>'
  } or {
    win() from B to C;      @'n1=x'
    lose() from B to A;
  } or {
    lose() from B to C;     @'(!(n1=x)) && t1=1'  // FIXME: ! precedence
    win() from B to A;
  } or {
    lower() from B to C;    @'n1<x && t1>1'
    lower() from B to A;
    do HighLowAux(A, B, C);  @'<n1, t1-1>'
  }
}